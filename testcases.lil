:- module("testcases").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("grammar").
:- ensure_loaded("trees").

test <- [pred].
testcase <- [pred].

:- module_implementation.

% SCRAMBLING TEST; HEAD-COMP SCHEMA

% Joanna loves John
% John loves Joanna
testcase("Ivana voli Ivana",
  [ EDGE_SIGN\DTRS\
    ( COMP_DTR\
      ( LEXICON\["Ivana"]
      & SYNSEM\LOCAL\CAT\HEAD\CASE\nom
      )
    & HEAD_DTR\DTRS\
      ( HEAD_DTR\
        ( LEXICON\["voljeti"]
        & SYNSEM\LOCAL\CAT\HEAD\
          ( TENSE\present
          & PERSON\third
          & NUMBER\singular
          )
        )
      & COMP_DTR\
        ( LEXICON\["Ivan"]
        & SYNSEM\LOCAL\CAT\HEAD\CASE\acc
        )
      )
    )
  , EDGE_SIGN\DTRS\
    ( COMP_DTR\
      ( LEXICON\["Ivan"]
      & SYNSEM\LOCAL\CAT\HEAD\CASE\acc
      )
    & HEAD_DTR\DTRS\
      ( HEAD_DTR\
        ( LEXICON\["voljeti"]
        & SYNSEM\LOCAL\CAT\HEAD\
          ( TENSE\present
          & PERSON\third
          & NUMBER\singular
          )
        )
      & COMP_DTR\
        ( LEXICON\["Ivana"]
        & SYNSEM\LOCAL\CAT\HEAD\CASE\nom
        )
      )
    )
  ]).


% ADJECTIVE and ADVERB TEST; HEAD-MOD SCHEMA

% Young John loves Joanna, beautiful as a dream
% testcase("Mladi Ivan voli Ivanu lijepu poput sna",


% 


test_list <- [pred].
test_list([]).
test_list([[W, CC] | LL]) :-
  print(W),
  parse(W),
  trees(TT),
  length(TT, TL),
  length(CC, CL),
  printAVM(["Found", TL, "parse trees"]),
  printAVM(["There are", CL, "canonical parses"]),
  set_difference(CC, TT, NF),
  (NF = []
    ->
      printAVM(["All canonical parses found"])
    ; (
      printAVM(["Not found:"]),
      print(NF),
      fail)
  ),
  test_list(LL).

test :-
  findall([W, T], testcase(W, T), CC),
  test_list(CC),
  print("Success"), !.
test :-
  print("Failed!").
