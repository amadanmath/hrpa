:- module("lexv").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("grammar").

lexv <- [pred].

:- module_implementation.


% fall down
lexv("pasti",
  SYNSEM\LOCAL\
  ( CAT\
    ( HEAD\sverb
    & VAL\COMPS\
      [ LOCAL\CAT\HEAD\(noun_like & CASE\nom)
      ]
    )
  & CONT\TAM\FINITE\plus
  )
).

% eat
lexv("jesti",
  SYNSEM\LOCAL\
  ( CAT\
    ( HEAD\sverb
    & VAL\COMPS\
      [ LOCAL\CAT\HEAD\(noun_like & CASE\nom)
      , LOCAL\CAT\HEAD\(noun_like & CASE\acc)
      ]
    )
  & CONT\TAM\FINITE\minus
  )
).

% love
lexv("voljeti",
  SYNSEM\LOCAL\
  ( CAT\
    ( HEAD\sverb
    & VAL\COMPS\
      [ LOCAL\CAT\HEAD\(noun_like & CASE\nom)
      , LOCAL\CAT\HEAD\(noun_like & CASE\acc)
      ]
    )
  & CONT\TAM\FINITE\minus
  )
).

% lead to
lexv("dovesti",
  SYNSEM\LOCAL\
  ( CAT\
    ( HEAD\sverb
    & VAL\COMPS\
      [ LOCAL\CAT\HEAD\(noun_like & CASE\nom)
      , LOCAL\CAT\HEAD\(noun_like & CASE\acc)
      , $DESTINATION
      ]
    )
  & CONT\TAM\FINITE\plus
  )
) :-
  member($DESTINATION,
    [ LOCAL\CAT\HEAD\(noun_like & CASE\dat)
    , LOCAL\CAT\HEAD\(prep & PFORM\do_gen)
    , LOCAL\CAT\HEAD\(prep & PFORM\u_acc)
    , LOCAL\CAT\HEAD\(prep & PFORM\k_loc) % TODO other preps
    ]
  ).

% be (auxiliary, copula)
lexv("biti", $sign) :-
  (
%fail, % DEBUG
    $sign
      = SYNSEM\LOCAL\
        ( CAT\
          ( HEAD\nsverb
          & VAL\
            ( AUX\$aux
            & SUBJ\[ LOCAL\CAT\HEAD\(noun_like & CASE\nom) ]
            )
          )
        & CONT\TAM\$tam
        ),
    member([$tam, $aux], [
      [MOOD\imperative & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\present & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\imperative & VOICE\passive)]]],
      [MOOD\infinitive & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\present & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\infinitive & VOICE\passive)]]],
      [MOOD\participle & TENSE\perfect & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\present & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\perfect & VOICE\passive)],
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\perfect & VOICE\$voice),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\pluperfect & VOICE\$voice)]]],
      [MOOD\indicative & FINITE\plus & TENSE\present & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\perfect & VOICE\$voice),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\future2 & VOICE\$voice)]]],
      [MOOD\indicative & FINITE\minus & TENSE\present & VOICE\active, [
        % passive present participle does not exist and cannot be generated
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\$tense & VOICE\$voice),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\$tense & VOICE\$voice)]]],
      [MOOD\indicative & FINITE\minus & TENSE\aorist & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\present & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\aorist & VOICE\passive)],
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\perfect & VOICE\$voice),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\conditional & TENSE\present & VOICE\$voice)],
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\pluperfect & VOICE\$voice),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\conditional & TENSE\perfect & VOICE\$voice)]]],
      [MOOD\indicative & FINITE\minus & TENSE\imperfect & VOICE\active, [
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\present & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\imperfect & VOICE\passive)],
        [LOCAL\CONT\TAM\(FINITE\$finite & MOOD\participle & TENSE\perfect & VOICE\passive),
          LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\pluperfect & VOICE\passive)]]]])
  ); (
    $sign
      = SYNSEM\LOCAL\CAT\
        ( HEAD\sverb
        & VAL\
          ( COMPS\
            [ LOCAL\CAT\HEAD\
              ( noun_like
              & CASE\nom
              )
            , $pred
            ]
          & SUBJ\[$subj]
          )
        ),
    ( $pred % copula + NP
        = LOCAL\CAT\HEAD\
          ( noun_like
          & CASE\nom
          )
%,fail % DEBUG
    ; $pred % copula + AP
        = LOCAL\CAT\
          ( HEAD\
            ( adjective
            & CASE\nom
            )
          & VAL\MOD\[$subj] % agreement!
          )
    ; $pred % copula + PP
        = LOCAL\CAT\
          ( HEAD\prep
          & VAL\COMPS\[]
          )
%,fail % DEBUG
    )
  ).

% want (auxiliary, regular)
lexv("htjeti", $sign) :-
  (
    $sign
      = SYNSEM\LOCAL\
        ( CAT\
          ( HEAD\nsverb
          % TODO? only clitic form acts as auxiliary
          % but many exceptions:
          %   questions: Hoces li pospremiti sobu?
          %   answers:   Hocu.
          % & CLITIC\cl_aux
          & VAL\
            ( AUX\
              [ [ LOCAL\CONT\TAM\(FINITE\$finite & MOOD\infinitive & VOICE\$voice)
                , LOCAL\CONT\TAM\(FINITE\$finite & MOOD\indicative & TENSE\future1 & VOICE\$voice)]
              ]
            & SUBJ\[ LOCAL\CAT\HEAD\CASE\nom ]
            )
          )
        & CONT\TAM\
          ( MOOD\indicative
          & TENSE\present
          & VOICE\active
          )
        )
  ); (
    $sign
      = SYNSEM\LOCAL\
        ( CAT\
          ( HEAD\sverb
          & VAL\COMPS\
            [ LOCAL\CAT\HEAD\CASE\nom
            , $object
            ]
          )
        & CONT\TAM\FINITE\minus
        ),
    $object = LOCAL\CAT\HEAD\CASE\acc % TODO clauses "ja hocu ici na more" "ja hocu da ti ides na more"
  ).
