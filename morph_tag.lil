:- module("morph_tag").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("lillib/lists").
:- ensure_loaded("lillib/strings").

parse_morph <- [pred].

:- module_implementation.


match_sub <- [pred].
match_sub($wlist, [], $wlist).
match_sub([$same | $wlist], [$same | $plist], $rest) :-
  match_sub($wlist, $plist, $rest).
match <- [pred].
match($wlist, $prefix, $rest) :-
  strtolist($prefix, $plist),
  match_sub($wlist, $plist, $rest).

morph_number <- [pred].
morph_number($wlist, singular, $rest) :- match($wlist, "sg", $rest).
morph_number($wlist, plural, $rest) :- match($wlist, "pl", $rest).
morph_case <- [pred].
morph_case($wlist, nom, $rest) :- match($wlist, "n", $rest).
morph_case($wlist, gen, $rest) :- match($wlist, "g", $rest).
morph_case($wlist, dat, $rest) :- match($wlist, "d", $rest).
morph_case($wlist, acc, $rest) :- match($wlist, "a", $rest).
morph_case($wlist, voc, $rest) :- match($wlist, "v", $rest).
morph_case($wlist, loc, $rest) :- match($wlist, "l", $rest).
morph_case($wlist, ins, $rest) :- match($wlist, "i", $rest).
morph_voice <- [pred].
morph_voice($wlist, active, $rest) :- match($wlist, "a", $rest).
morph_voice($wlist, passive, $rest) :- match($wlist, "p", $rest).
morph_gender <- [pred].
morph_gender($wlist, masculine, $rest) :- match($wlist, "m", $rest).
morph_gender($wlist, feminine, $rest) :- match($wlist, "f", $rest).
morph_gender($wlist, neuter, $rest) :- match($wlist, "n", $rest).
morph_tense <- [pred].
morph_tense($wlist, present, $rest) :- match($wlist, "p", $rest).
morph_tense($wlist, aorist, $rest) :- match($wlist, "a", $rest).
morph_tense($wlist, imperfect, $rest) :- match($wlist, "i", $rest).
morph_definite <- [pred].
morph_definite($wlist, plus, $rest) :- match($wlist, "d", $rest).
morph_definite($wlist, minus, $rest) :- match($wlist, "i", $rest).
morph_finite <- [pred].
morph_finite($wlist, plus, $rest) :- match($wlist, "f", $rest).
morph_finite($wlist, minus, $rest) :- match($wlist, "i", $rest).
morph_person <- [pred].
morph_person($wlist, first, $rest) :- match($wlist, "1", $rest).
morph_person($wlist, second, $rest) :- match($wlist, "2", $rest).
morph_person($wlist, third, $rest) :- match($wlist, "3", $rest).


recognise <- [pred].


% NOUN: jabuku: jabuka/Nasgf
% (3rd person, for all nouns)
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\HEAD\
      ( noun
      & CASE\$case
      )
    & CONT\INDEX\
      ( PERSON\third
      & NUMBER\$number
      & GENDER\$gender
      )
    )
  ) :-

  %   N   [noun]
  match($wlist, "N", $mpos),

  %   n, g, d, a, v, l, i   [nom, gen, dat, acc, voc, loc, ins]
  morph_case($mpos, $case, $mcase),

  %   sg, pl   [singular, plural]
  morph_number($mcase, $number, $mnumber),

  %   (m, f, n)   [masculine, feminine, neutrum] (lexically determined)
  (morph_gender($mnumber, $gender, [])
    ->  true
    ;   $mnumber = []).


% PERSONAL PRONOUN: njoj: on/Sasgf
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\
      ( HEAD\
        ( pronoun
        & CASE\$case
        )
      & CLITIC\$clitic
      )
    & CONT\INDEX\
      ( NUMBER\$number
      & GENDER\$gender
      )
    )
  ) :-

  %   S   [pronoun]
  match($wlist, "S", $mpos),

  % (cl)   [clitic]   (only dat, gen, acc)
  (match($mpos, "cl", $mclitic)
    ->  member([$case, $clitic],
          [ [dat, cl_dat]
          , [gen, cl_accgen]
          , [acc, cl_accgen]
          ])
    ;   ($clitic = not_clitic, $mclitic = $mpos)),

  %   n, g, d, a, v, l, i   [nom, gen, dat, acc, voc, loc, ins]
  morph_case($mclitic, $case, $mcase),

  %   sg, pl   [singular, plural]
  morph_number($mcase, $number, $mnumber),

  %   m, f, n   [masculine, feminine, neutrum]
  morph_gender($mnumber, $gender, []).


% ADJECTIVE: bijela: bijel/Aapln; zeleni: zelen/Ansgmd
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\
      ( HEAD\
        ( adjective
        & DEFINITE\$definite
        & SCRAMBLES\plus
        )
      & VAL\MOD\
        [ LOCAL\
          ( CONT\INDEX\
            ( GENDER\$gender
            & NUMBER\$number
            )
          & CAT\HEAD\CASE\$case
          )
        ]
      )
    )
  ) :-

  %   A   [adjective]
  match($wlist, "A", $mpos),

  %   n, g, d, a, v, l, i   [nom, gen, dat, acc, voc, loc, ins]
  morph_case($mpos, $case, $mcase),

  %   sg, pl   [singular, plural]
  morph_number($mcase, $number, $mnumber),

  %   m, f, n   [masculine, feminine, neutrum]
  morph_gender($mnumber, $gender, $mgender),

  %   (d, i)   [definite, indefinite]
  (morph_definite($mgender, $definite, []); $mgender = []).


% VERB-INF: raditi: raditi/Vinf
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\HEAD\
      ( verb
      & SCRAMBLES\plus
      )
    & CONT\TAM\MOOD\infinitive
    )
  ) :-

  %   V   [verb]
  %   inf   [infinitive]
  match($wlist, "Vinf", []).


% VERB-PARTICIPLE: bila: biti/Vnsgfa; pretucenog: pretuci/Vasgmp
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\
      ( HEAD\
        ( verb
        & SCRAMBLES\plus
        )
      & VAL\SUBJ\
        [ LOCAL\
          ( CONT\INDEX\
            ( GENDER\$gender
            & NUMBER\$number
            )
          & CAT\HEAD\CASE\$case
          )
        ]
      )
    & CONT\TAM\
      ( VOICE\$voice
      & TENSE\$tense
      & MOOD\participle
      )
    )
  ) :-

  %   V   [verb]
  match($wlist, "V", $mpos),

  %   n, g, d, a, v, l, i   [nom, gen, dat, acc, voc, loc, ins]
  morph_case($mpos, $case, $mcase),

  %   sg, pl   [singular, plural]
  morph_number($mcase, $number, $mnumber),

  %   m, f, n   [masculine, feminine, neutrum]
  morph_gender($mnumber, $gender, $mgender),

  %   a, p   [active, passive]
  morph_voice($mgender, $voice, []),

  % choose the correct tense for the voice
  %   active = perfect, passive = present
  %   (other combinations do not happen without compounding)
  ($voice = active -> $tense = perfect ; $tense = present).


% VERB: je: biti/Vcl3sgp; jedoh: jesti/V1sga
recognise($wlist,
    SYNSEM\LOCAL\
    ( CAT\
      ( HEAD\
        ( verb
        & PREDICATE\plus
        & SCRAMBLES\plus
        )
      & CLITIC\$clitic
      & VAL\SUBJ\
        [ LOCAL\CONT\INDEX\
          ( NUMBER\$number
          & PERSON\$person
          )
        ]
      )
    & CONT\TAM\
      ( TENSE\$tense
      & FINITE\$finite
      & MOOD\indicative
      & VOICE\active
      )
    )
  ) :-

  % V   [verb]
  match($wlist, "V", $mpos),

  % (cl)   [clitic]
  (match($mpos, "cl", $mclitic)
    ->  (match($mclitic, "3sgp", [])
      ->  $clitic = cl_aux3
      ;   $clitic = cl_aux)
    ;   ($clitic = not_clitic, $mclitic = $mpos)),

  %   1, 2, 3   [1st, 2nd, 3rd]
  morph_person($mclitic, $person, $mperson),

  %   sg, pl   [singular, plural]
  morph_number($mperson, $number, $mnumber),

  %   p, a, i   [present, aorist, imperfect]
  morph_tense($mnumber, $tense, $mtense),

  %   (f, i)   [finite, infinite]
  (morph_finite($mtense, $finite, [])
    ->  true
    ;   $mtense = []).


parse_morph($template, $sign) :-
  strtolist($template, $morphlist),
  recognise($morphlist, $sign).
