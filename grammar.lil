:- module("grammar").
:- module_interface.

:- ensure_loaded("lillib/lists").
:- ensure_loaded("lillib/strings").

:- ensure_loaded("parser").
:- ensure_loaded("display").
:- ensure_loaded("no_fom").

:- ensure_loaded("types").
:- ensure_loaded("word").
:- ensure_loaded("wordorder").
:- ensure_loaded("trees").

:- ensure_loaded("pretty").



principles <- [pred].

nonlocal_bind <- [pred].


:- module_implementation.

% ID SCHEMA DEFINITIONS
% =====================

% only true for lists of MAND\minus (default)
% i.e. obligatory arguments must be marked MAND\plus
only_optional <- [pred].
only_optional([]).
only_optional([X | Xs]) :-
  X = MAND\minus,
  only_optional(Xs).

% the difference from delete/3: fail if not found
find_and_delete <- [pred].
find_and_delete([X | Xs], X, Xs).
find_and_delete([X | Xs], Y, [X | Ys]) :- find_and_delete(Xs, Y, Ys).

% the difference from set_difference/3: fail if not found
find_and_delete_all <- [pred].
find_and_delete_all(X, [], X).
find_and_delete_all(X, [Y | Ys], Z) :-
  find_and_delete(X, Y, T),
  find_and_delete_all(T, Ys, Z).

% do not allow a clitic unless in clitic resolution.
assure_nocl <- [pred].
assure_nocl(SYNSEM\NONLOCAL\INHER\CLSTORE\[]).
assure_nocl(SYNSEM\LOCAL\CAT\CLITIC\not_clitic).


head_comp_schema_common_rule <- [pred].
head_comp_schema_common_rule($head, $comp, $mother) :-
  assure_nocl($comp),
  assure_nocl($head),
  $head
    = SYNSEM\LOCAL\
      ( CAT\
        ( VAL\
          ( COMPS\$headcomps
          & AUX\$headaux
          & SPR\$headspr
          & MOD\$headmod
          & SUBJ\$headsubj
          )
        & CLITIC\$cl
        )
      & CONT\$cont
      ),
  $comp
    = SYNSEM\LOCAL\
      ( $complocal
      & CAT\VAL\
        ( SPR\$compspr
        & COMPS\$compcomps
        )
      ),
  only_optional($compcomps),
  only_optional($compspr),
  %$head = PHONOLOGY\$hp, $comp = PHONOLOGY\$np, print(["YOP", $head, $comp]),
  find_and_delete($headcomps, $complocal, $mothercomps),
  $mother
    = SYNSEM\LOCAL\
      ( CAT\
        ( VAL\
          ( COMPS\$mothercomps
          & AUX\$headaux
          & SPR\$headspr
          & MOD\$headmod
          & SUBJ\$headsubj
          )
        & CLITIC\$cl
        )
      & CONT\$cont
      )
    & DTRS\
      ( HEAD_DTR\$head
      & COMP_DTR\$comp
      )
      .

head_comp_schema_rule <- [pred].
head_comp_schema_rule($head, $comp, $head, $comp, $mother) :-
  %$mother = SYNSEM\LOCAL\CAT\HEADRIGHT\minus,
  head_comp_schema_common_rule($head, $comp, $mother).

comp_head_schema_rule <- [pred].
comp_head_schema_rule($comp, $head, $head, $comp, $mother) :-
  %$head
  %  = SYNSEM\LOCAL\CAT\
  %    ( HEAD\SCRAMBLES\plus
  %    & HEADRIGHT\$headright
  %    ),
  %$mother = SYNSEM\LOCAL\CAT\HEADRIGHT\$headright,
  head_comp_schema_common_rule($head, $comp, $mother).

noun_mod_order <- [pred].
% for noun-likes, allow mod-head order ONLY if both are head-right
noun_mod_order($mod & SYNSEM\LOCAL\CAT\HEADRIGHT\plus, $head & SYNSEM\LOCAL\CAT\HEADRIGHT\plus, $head, $mod, plus) :- !.
% for non-noun-likes, allow mod-head order
noun_mod_order($mod, $head, $head, $mod, plus) :-
  \+ $head = SYNSEM\LOCAL\CAT\HEAD\noun_like.
% for all, also allow the head-mod order (unless cut in the first condition)
noun_mod_order($head, $mod, $head, $mod, minus).

head_mod_schema_rule <- [pred].
head_mod_schema_rule($left, $right, $head, $mod, $mother) :-
  noun_mod_order($left, $right, $head, $mod, $headright),
  assure_nocl($mod),
  assure_nocl($head),
  $head
    = SYNSEM\LOCAL\
      ( $headlocal
      & CAT\
        ( VAL\
          ( SPR\$headspec
          & AUX\[]
          & COMPS\$headcomps
          & MOD\$headmod
          & SUBJ\$headsubj
          )
        & CLITIC\$cl
        )
      & CONT\$cont
      ),
  $mod
    = SYNSEM\LOCAL\CAT\VAL\
      ( SPR\$modspr
      & COMPS\$modcomps
      & MOD\[$headlocal]
      ),
  only_optional($modcomps),
  only_optional($modspr),
  $mother
    = SYNSEM\LOCAL\
      ( CAT\
        ( VAL\
          ( SPR\$headspec
          & AUX\[]
          & COMPS\$headcomps
          & MOD\$headmod
          & SUBJ\$headsubj 
          )
        & CLITIC\$cl
        & HEADRIGHT\$headright
        )
      & CONT\$cont
      )
    & DTRS\
      ( HEAD_DTR\$head
      & MOD_DTR\$mod
      ).

aux_verb_schema_rule <- [pred].
aux_verb_schema_rule($aux, $verb, $aux, $verb, $mother) :-
  assure_nocl($aux),
  assure_nocl($verb),
  $aux
    = SYNSEM\LOCAL\CAT\
      ( HEAD\$auxhead
      & VAL\
        ( AUX\$auxaux
        & SPR\$auxspr
        & MOD\$auxmod
        & COMPS\$auxcomps
        & SUBJ\$auxsubj
        )
      & CLITIC\$cl
      ),
  $verb
    = SYNSEM\LOCAL\
      ( $verblocal
      & CAT\
        ( HEAD\verb
        & VAL\
          ( COMPS\$verbcomps
          & AUX\[] % aux is always left
          & SUBJ\$auxsubj
          )
        )
      ),
%$aux=LEXICON\$lp,$other=LEXICON\$rp,printAVM([$lp, $rp]),
%printAVM(["O",$othersynsem]),
%printAVM(["M",$mothersynsem]),
%printAVM(["A",$auxaux]),
  member([$verblocal, $motherlocal], $auxaux),
  (($auxsubj = [$subj], $auxcomps = [])
    -> find_and_delete($verbcomps, $subj, $mothercomps)
    ;  $mothercomps = $verbcomps
  ),
  $mother
    = SYNSEM\LOCAL\
      ( $motherlocal
      & CAT\
        ( HEAD\$auxhead
        & VAL\
          ( COMPS\$verbcomps
          & AUX\[] % aux is always left
          & SPR\$auxspr % TODO check when writing SPR rules!
          & MOD\$auxmod % TODO verify!
          & SUBJ\$auxsubj
          )
        & CLITIC\$cl
        )
      )
    & DTRS\
      ( AUX_DTR\$aux
      & VERB_DTR\$verb
      ).

cl_member <- [pred].
cl_member($cl, [SYNSEM\LOCAL\CAT\CLITIC\$storecl | _]) :-
  subsume($cl, $storecl),
  !.
cl_member($cl, [_ | $clstore]) :-
  cl_member($cl, $clstore).

head_cl_schema_rule <- [pred].
head_cl_schema_rule($head, $cl, $head, $cl, $mother) :-
  $head
    = SYNSEM\
      ( LOCAL\
        ( $local
        & CAT\CLITIC\not_clitic
        )
      & NONLOCAL\INHER\CLSTORE\$clstore
      ),
  $cl
    = SYNSEM\
      ( LOCAL\CAT\CLITIC\
        ( $cltype
        & is_clitic
        )
      & NONLOCAL\INHER\CLSTORE\[_] % treat it as a clitic only teh first time
      ),
  \+ cl_member($cltype, $clstore), % no two clitics of same type, no order violations!
  % clitic's NONLOCAL\INHER handled in nonlocal_bind, as usual
  $mother
    = SYNSEM\
      ( LOCAL\$local
      )
    & DTRS\
      ( HEAD_DTR\$head
      & CL_DTR\$cl
      ).

default <- [pred].
default($fs, $feature, $default, $other) :-
  (follow($fs, $feature, $value),
      unifiable($value, $other),
      $value = $default, !)
    ; true.

% Immediate Dominance: collects other principles
id_principle <- [pred].
id_principle(head_comp_schema, $left, $right, $head, $comp, $mother) :-
  head_comp_schema_rule($left, $right, $head, $comp, $mother).
id_principle(comp_head_schema, $left, $right, $head, $comp, $mother) :-
  comp_head_schema_rule($left, $right, $head, $comp, $mother).
id_principle(head_mod_schema, $left, $right, $head, $mod, $mother) :-
  head_mod_schema_rule($left, $right, $head, $mod, $mother).
id_principle(aux_verb_schema, $left, $right, $head, $verb, $mother) :-
  aux_verb_schema_rule($left, $right, $head, $verb, $mother).
id_principle(head_cl_schema, $left, $right, $head, $verb, $mother) :-
  head_cl_schema_rule($left, $right, $head, $verb, $mother).

% HFP: Mother and Head share head features.
head_feature_principle <- [pred].
head_feature_principle($head, $mother) :-
  $mother = (SYNSEM\LOCAL\CAT\HEAD\$x),
  $head = (SYNSEM\LOCAL\CAT\HEAD\$x).

nonlocal_bind($inher_head, $inher_nhead, $bind_head, $bind_nhead, $inher) :-
  find_and_delete_all($inher_head, $bind_nhead, $head),
  find_and_delete_all($inher_nhead, $bind_head, $nhead),
  append($head, $nhead, $inher).

cl_nonlocal_bind <- [pred].
cl_nonlocal_bind($inher_head, $inher_nhead, $bind_head, $bind_nhead, $inher) :-
  set_difference($inher_head, $bind_nhead, $head),
  set_difference($inher_nhead, $bind_head, $nhead),
  append($head, $nhead, $inher).

nonlocal_principle <- [pred].
nonlocal_principle($head, $nonhead, $mother) :-
  $head
    = SYNSEM\NONLOCAL\
      ( INHER\
        ( CLSTORE\$h_inher_cl
        )
      & TOBIND\
        ( $h_bind
        & CLSTORE\$h_bind_cl
        )
      ),
  default($h_bind, CLSTORE\, [], [_]),
  $nonhead
    = SYNSEM\NONLOCAL\
      ( INHER\
        ( CLSTORE\$n_inher_cl
        )
      & TOBIND\
        ( $n_bind
        & CLSTORE\$n_bind_cl
        )
      ),
  default($n_bind, CLSTORE\, [], [_]),
  $mother
    = SYNSEM\NONLOCAL\INHER\
      ( CLSTORE\$m_inher_cl
      ),
  nonlocal_bind($h_inher_cl, $n_inher_cl, $h_bind_cl, $n_bind_cl, $m_inher_cl).

phonology_principle_binary <- [pred].
phonology_principle_binary($left, $right, $mother) :-
  $left = (PHONOLOGY\$leftphon & LEXICON\$leftlex),
  $right = (PHONOLOGY\$rightphon & LEXICON\$rightlex),
  $mother = (PHONOLOGY\$motherphon & LEXICON\$motherlex),
  append($leftphon, $rightphon, $motherphon),
  append($leftlex, $rightlex, $motherlex).

phonology_principle_unary <- [pred].
phonology_principle_unary($dtr, $mother) :-
  $dtr = (PHONOLOGY\$phon & LEXICON\$lex),
  $mother = (PHONOLOGY\$phon & LEXICON\$lex).

principles($schema, $left, $right, $mother) :-
  id_principle($schema, $left, $right, $head, $nonhead, $mother),
  nonlocal_principle($head, $nonhead, $mother),
  head_feature_principle($head, $mother).

fill_defaults <- [pred].
fill_defaults($sign) :-
  $sign
    = SYNSEM\
      ( LOCAL\
        ( $local
        & CAT\
          ( $cat
          & HEAD\$head
          & VAL\$val
          )
        )
      & NONLOCAL\INHER\$inher
      )
    & WORDORDER\$wordorder,
  default($cat, CLITIC\, not_clitic, is_clitic),
  default($cat, HEADRIGHT\, plus, minus),
  default($val, SPR\, [], [_]),
  default($val, COMPS\, [], [_]),
  default($val, MOD\, [], [_]),
  default($val, AUX\, [], [_]),
  default($head, PREDICATE\, minus, plus),
  ($cat = CLITIC\is_clitic
    ->  (default($inher, CLSTORE\, [$local], []),
         default($wordorder, WO_CLITIC\, enclitic, nonclitic))
    ;   (default($inher, CLSTORE\, [], [_])),
         default($wordorder, WO_CLITIC\, nonclitic, enclitic)),
  default($head, SCRAMBLES\, minus, plus),
  ($head = PREDICATE\plus
    -> default($wordorder, WO_PREDICATIVE\, plus, minus)
    ;  default($wordorder, WO_PREDICATIVE\, minus, plus)),
  default($wordorder, WO_CBLOCK\, no_cb, done_cb),
  default($wordorder, WO_MULTIWORD\, minus, plus).


% interface for UP
% ================


% binary branching licence (+$schema, +$left, +$right, -$mother, -$dcp)
id_schema_binary($schema, $left, $right, $mother, $dcp) :-
  %pretty(["LEFT",$left]),pretty(["RIGHT",$right]),
  %$left=LEXICON\$lp,$right=LEXICON\$rp,printAVM(["?", $lp, $rp]),
  principles($schema, $left, $right, $mother),
  word_order($left, $right, $mother),
  %$mother=SYNSEM\LOCAL\CAT\HEADRIGHT\$hr,$left=LEXICON\$lp,$right=LEXICON\$rp,printAVM([$schema, $lp, $rp, $hr]),
      %DEBUG print("LEFT"),print($left),print("RIGHT"),print($right),
      %DEBUG print(["MOTHER TEMP",$mother_temp]),
 
  % TODO limit where this can happen
  $dcp = phonology_principle_binary($left, $right, $mother)
  %,$left=LEXICON\$lp,$right=LEXICON\$rp,printAVM(["OK B", $schema, $lp, $rp])
  %,pretty_feat($left, PHONOLOGY\)
  %,pretty_feat($right, PHONOLOGY\)
  %,pretty(["MOTHER_TEMP",$mother_temp])
  % ,$mother_temp = SYNSEM\LOCAL\CAT\HEADRIGHT\$headright
  %,pretty($mother_temp)
  %,pretty("---------------------")
  %,$left=LEXICON\$lp,$right=LEXICON\$rp,printAVM([$schema, $lp, $rp])
      %,printAVM(["MOTEMP",$mother_temp])
      %,printAVM(["MOTHER",$mother])
      %,$mother=SYNSEM\$mothersynsem,printAVM(["MOTHER'S SYNSEM",$schema,$mothersynsem])
      %,printAVM(["SCHEMA",$schema])
.



% dummy clause, necessary because UP checks at the start whether
% 'id_schema_unary' is defined and if we don't handle it, we'll be
% getting invalid input, possibly resulting in an infinite loop
id_schema_unary(_, $daughter, _, _) :-
  equivalent($daughter, bot).
id_schema_unary($schema, $daughter, $mother, $dcp) :-
  $daughter
    = SYNSEM\
      ( LOCAL\$local
      & NONLOCAL\
        ( INHER\CLSTORE\$clitic_locals
        )
      )
    & WORDORDER\$wordorder,
  member($clitic_local, $clitic_locals),
  % at the beginning, clitics contain their LOCAL in INHER, don't try to
  % join those (even though it would be disallowed by other rules)
  \+ identical($clitic_local, $local),
  $clitic
    = SYNSEM\
      ( LOCAL\$clitic_local
      & NONLOCAL\TOBIND\CLSTORE\[$clitic_local]
      ),
  principles($schema, $clitic, $daughter, $mother),
  $mother = WORDORDER\$wordorder,
  $dcp = phonology_principle_unary($daughter, $mother)
  %,$daughter=LEXICON\$rp,printAVM(["OK U", $schema, $rp])
.


make_lexent <- [pred].
make_lexent($word, $base, $alt, $template
  , LEXENT\
    ( LEX_TEMPLATE\$template
    & LEX_WORD\
      ( SURF\$word
      & BASE\$base
      & ALT\$alt
      )
    )
  & LEXENT_FOM\0.0
  ).

separate_by_slash_lists <- [pred].
separate_by_slash_lists([], $revleft, $left, []) :- % no slash anywhere
  reverse($revleft, $left), !.
separate_by_slash_lists([47 | $right], $revleft, $left, $right) :- % slash found
  reverse($revleft, $left), !.
separate_by_slash_lists([$char | $input], $revleft, $left, $right) :-
  separate_by_slash_lists($input, [$char | $revleft], $left, $right).

% translate 'Ivan/Nnsgm' into 'Ivan', 'Nnsgm'
separate_by_slash <- [pred].
separate_by_slash($input, $left, $right) :-
  strtolist($input, $inputlist),
  separate_by_slash_lists($inputlist, [], $leftlist, $rightlist),
  listtostr($leftlist, $left),
  listtostr($rightlist, $right).

% translate [he runs] into [[0 1 "he"] [1 2 "runs"]]...
% hack (only one lexent per word)
make_lattice <- [pred].
make_lattice([], _, []).
make_lattice([$word | $wordlist],
      $left,
      [$extent | $lattice]) :-
  $right is $left + 1,
  separate_by_slash($word, $base, $template),
  findall(
    $sign,
    base_and_template_to_sign($base, $template, $sign),
    $signs),
  length($signs, $num_signs),
  $num_signs \= 0,
  make_num_list(0, $num_signs, $alts),
  findall(
    $lexent,
    (
      member($alt, $alts),
      make_lexent($word, $base, $alt, $template, $lexent)
    ),
    $lexents),
  $extent
    = BEGIN_POSITION\$left
    & END_POSITION\$right
    & LEXENT_LIST\$lexents,
  make_lattice($wordlist, $right, $lattice).

strlist_to_word([$word, $basealt], _, _, SURF\$word & BASE\$base & ALT\$alt) :-
  separate_by_slash($basealt, $base, $altstr),
  strtoint($altstr, $alt).
word_to_strlist(SURF\$word & BASE\$base & ALT\$alt, [$word, $basealt]) :-
  inttostr($alt, $altstr),
  strcat($base, "/", $slashed),
  strcat($slashed, $altstr, $basealt).


% translate "he runs" into [[0 1 "he"] [1 2 "runs"]]...
sentence_to_lattice($sentence, $lattice) :-
  split($sentence, " ", $wordlist),
  make_lattice($wordlist, 0, $lattice).

% fetches the sign from the lexical template
lexical_entry_sign(LEX_WORD\(SURF\$word & BASE\$base & ALT\$alt) & LEX_TEMPLATE\$template, $sign) :-
  findall(
    $sign,
    base_and_template_to_sign($base, $template, $sign),
    $signs),
  nth($signs, $alt, $sign),
  $sign = LEXICON\[$base] & PHONOLOGY\[$word],
  fill_defaults($sign).

%　Valid root sign: no unfilled dependencies
root_sign(S) :-
  S
    = SYNSEM\
      ( LOCAL\CAT\
        ( HEAD\PREDICATE\plus
        & VAL\
          ( SPR\$spec
          & COMPS\$comps
          & MOD\$mod
          & AUX\[]
          )
        )
      & NONLOCAL\INHER\
        ( CLSTORE\[]
        )
      ),
  only_optional($spec),
  only_optional($comps),
  only_optional($mod).

reduce_sign($sign, $sign, _) :-
  % TODO not sure if this is needed / advisable
  % restriction($sign, DTRS\).
  true.

parser_init :-
  set_limit_sentence_length(40),
  set_limit_edge_number(20000).

