:- module("test").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("grammar").

test <- [pred].
test_line <- [pred].

:- module_implementation.

print_stdout <- [pred].
print_stdout($str) :-
  stdout_stream($out),
  writeln_string($out, $str).

passed <- [pred].
passed($line, $passed) :-
  strcat("  ", $passed, $str1),
  strcat($str1, $line, $str),
  print_stdout($str).

failed <- [pred].
failed($line, $passed) :-
  strcat("X ", $passed, $str1),
  strcat($str1, $line, $str),
  print_stdout($str).


check_line_cases <- [pred].
check_line_cases([], _) :- !. % empty line
check_line_cases([35, 35 | $line], _) :- % printable comment
  !,
  listtostr([32, 32, 32, 32 | $line], $str),
  print_stdout($str).
check_line_cases([35 | _], _). % non-printable comment
check_line_cases([42 | $list], $line) :- % bad line
  listtostr($list, $badline),
  (
    parse($badline)
      -> failed($line, "OK ")
      ; passed($line, "NG ")
  ), !.
check_line_cases(_, $line) :- % good line
  ( parse($line)
    -> passed($line, "OK ")
    ; failed($line, "NG ")
  ), !.


test_line("__END__") :- !, fail.
test_line($line) :-
  strtolist($line, $list),
  check_line_cases($list, $line).


test_case <- [pred].
test_case($handle) :-
  readln_string($handle, $line)
  -> (test_line($line)
        -> test_case($handle)
        ;  true)
  ; true.
  

test :-
  open_file_stream("test.txt", "r", $handle),
  test_case($handle),
  close($handle).


% WEIRD:
% :- test.
