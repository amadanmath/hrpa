:- module("pretty").
:- module_interface.

:- ensure_loaded("lillib/lists").

% pretty(+$value).
%   pretty prints to standard output
pretty <- [pred].

% pretty_to(+$stream, +$value).
%   pretty prints to a stream
pretty_to <- [pred].

% pretty_feat(+$value, $feat).
%   pretty prints a selected feature to standard output
pretty_feat <- [pred].

% pretty_feat_to(+$stream, +$value, +$feat).
%   pretty prints a selected feature to a stream
pretty_feat_to <- [pred].



:- module_implementation.


default <- [pred].
default($value, $feature) :-
  type_copy($value, $copy),
  follow($copy, $feature, $default_type),
  follow($value, $feature, $feature_value),
  equivalent($feature_value, $default_type).

non_default_features <- [pred].
non_default_features($value, $features) :-
  findall(
    $feature,
    (
      type_featurelist($value, $features),
      member($feature, $features),
      \+ default($value, $feature)
    ),
    $features).

base_complex <- [pred].
base_complex($value) :- is_integer($value), !, fail.
base_complex($value) :- is_float($value), !, fail.
base_complex($value) :- is_string($value), !, fail.
base_complex($value) :- equivalent($value, bot), !, fail.
base_complex($value) :- equivalent($value, list), !, fail.
base_complex($value) :- equivalent($value, nil), !, fail.

deep_complex <- [pred].
deep_complex($value) :- base_complex($value).
deep_complex([$element]) :- \+ deep_complex($element), !, fail.
deep_complex($value) :- type_toptype($value, cons), !.
deep_complex($value) :-
  non_default_features($value, [$head | $tail]),
  ( $tail = [_ | _]
  ; (
      follow($value, $head, $head_value),
      deep_complex($head_value)
    )
  ).

shallow_complex <- [pred].
shallow_complex($value) :- base_complex($value).
shallow_complex([$element]) :- \+ deep_complex($element), !, fail.
shallow_complex($value) :- type_toptype($value, cons), !.
shallow_complex($value) :-
  non_default_features($value, [_, _ | _]).


indent <- [pred].
indent(0, $newline) :- !,
  listtostr([10], $newline).
indent($indent, $spaces) :-
  $subindent is $indent - 1,
  indent($subindent, $subspaces),
  strcat($subspaces, "  ", $spaces).

format_line <- [pred].
format_line($spaces, $line, $header, $str) :-
  strcat($header, $line, $headered),
  strcat($headered, $spaces, $str).

format_lines <- [pred].
format_lines(_, [], _, "").
format_lines($spaces, [$line | $lines], $header, $str) :-
  format_line($spaces, $line, $header, $formatted_first),
  format_lines($spaces, $lines, $header, $formatted_rest),
  strcat($formatted_first, $formatted_rest, $str).

format_complex <- [pred].
format_complex($lines, $indent, $head, $separator, $tail, $str) :-
  $lines = [$first | $rest],
  indent($indent, $spaces),
  format_line($spaces, $first, $head, $indented_first),
  format_lines($spaces, $rest, $separator, $indented_rest),
  strcat($indented_first, $indented_rest, $unclosed),
  strcat($unclosed, $tail, $str).

newline_if_complex <- [pred].
newline_if_complex($feature_value, $backslashed, $indent, $next_spaces, $newlined, $next_indent) :-
  shallow_complex($feature_value), !,
  $next_indent is $indent + 1,
  strcat($backslashed, $next_spaces, $newlined).
newline_if_complex(_, $backslashed, $indent, _, $backslashed, $indent).

to_pretty <- [pred].
to_pretty($value, _, $str) :- % bot
  equivalent($value, bot), !,
  $str is "bot".
to_pretty($value, _, $str) :- % integer
  is_integer($value), !,
  inttostr($value, $str).
to_pretty($value, _, $str) :- % float
  is_float($value), !,
  floattostr($value, $str).
to_pretty($value, _, $str) :- % string
  is_string($value), !,
  listtostr([34], $quote),
  strcat($quote, $value, $unclosed),
  strcat($unclosed, $quote, $str).
to_pretty($value, _, $str) :- % list type
  equivalent($value, list), !,
  $str = "list".
to_pretty($value, _, $str) :- % nil (empty list)
  equivalent($value, nil), !,
  $str is "[]".
to_pretty($value, _, $str) :- % list, 1 simple element
  $value = [$element],
  \+ deep_complex($element), !,
  to_pretty($element, 0, $pretty),
  strcat("[ ", $pretty, $unclosed),
  strcat($unclosed, " ]", $str).
to_pretty($value, $indent, $str) :- % list
  type_toptype($value, cons), !,
  $next_indent is $indent + 1,
  findall(
    $line,
    (
      member($element, $value),
      to_pretty($element, $next_indent, $line)
    ),
    $lines),
  format_complex($lines, $indent, "[ ", ", ", "]", $str).
to_pretty($value, $indent, $str) :- % feature structure, 1 feature
  type_featurelist($value, [ $feature ]), !,
  feattostr($feature, $feature_name),
  follow($value, $feature, $feature_value),
  to_pretty($feature_value, $indent, $feature_pretty),
  strcat($feature_name, "\", $backslashed),
  strcat($backslashed, $feature_pretty, $str).
to_pretty($value, $indent, $str) :- % feature structure
  type_nfeature($value, $num_features),
  $num_features > 1, !,
  $next_indent is $indent + 1,
  indent($next_indent, $next_spaces),
  findall(
    $line,
    (
      type_featurelist($value, $features),
      member($feature, $features),
      \+ default($value, $feature),
      feattostr($feature, $feature_name),
      follow($value, $feature, $feature_value),
      strcat($feature_name, "\", $backslashed),
      newline_if_complex($feature_value, $backslashed, $indent, $next_spaces, $newlined, $indent_to_use),
      to_pretty($feature_value, $indent_to_use, $feature_pretty),
      strcat($newlined, $feature_pretty, $line)
    ),
    $lines),
  ($lines = []
    ->  (
          type_toptype($value, $type),
          typetostr($type, $str)
        )
    ;   ($lines = [$line]
          ->  $str is $line
          ;   format_complex($lines, $indent, "( ", "& ", ")", $str)
        )
  ).
to_pretty($value, _, $str) :- % plain type
  type_toptype($value, $type),
  typetostr($type, $str).
  


pretty_to($stream, $value) :-
  to_pretty($value, 0, $str),
  writeln_string($stream, $str).

pretty($value) :-
  stdout_stream($stdout),
  pretty_to($stdout, $value).

pretty_feat_to($stream, $value, $feat) :-
  follow($value, $feat, $feat_value),
  pretty_to($stream, $feat_value).

pretty_feat($value, $feat) :-
  follow($value, $feat, $feat_value),
  pretty($feat_value).
