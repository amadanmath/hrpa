:- module("word").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("morph_tag").
:- ensure_loaded("lexn").
:- ensure_loaded("lexv").
:- ensure_loaded("lexa").
:- ensure_loaded("lexe").
:- ensure_loaded("lillib/lists").
:- ensure_loaded("lillib/strings").

word_to_sign <- [pred].

:- module_implementation.

find_word <- [pred].
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\noun) :-
  lexn($lemma, $sign).
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\verb) :-
  lexv($lemma, $sign),
  % sverbs have subject as first complement (default)
  ($sign = SYNSEM\LOCAL\CAT\HEAD\sverb ->
    $sign = SYNSEM\LOCAL\CAT\VAL\
        ( SUBJ\[$subj]
        & COMPS\
          [$subj | _]
        );
    true).
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\adjective) :-
  lexa($lemma, $sign).

transform <- [pred].
transform($sign) :-
  % delete the actor from the passive participles; obligatory
  ( $sign = SYNSEM\LOCAL\(CAT\HEAD\verb & CONT\TAM\VOICE\passive) ->
    (
      % fail if not a classic nom/acc transitive verb
      $sign
        = SYNSEM\LOCAL\CAT\VAL\
          ( $val
            & COMPS\
              [ LOCAL\CAT\HEAD\CASE\nom
              | $comps
                & [ LOCAL\CAT\HEAD\
                    ( $head
                    & CASE\acc
                    )
                  | _
                  ]
              ]
          ),
      overwrite($head, CASE\, nom),
      overwrite($val, COMPS\, $comps)
    ) ; true).

word_to_sign($word, $lemma, $sign) :- % changeable words (morphology resolution)
  lemmatise($word, $lemma, $sign),
  find_word($lemma, $sign),
  transform($sign).
word_to_sign($word, $lemma, $sign) :- % unchangeable words (exact match)
  lexe($word, $sign),
  $lemma = $word.
