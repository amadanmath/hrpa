:- module("word").
:- module_interface.

:- ensure_loaded("types").
:- ensure_loaded("morph_tag").
:- ensure_loaded("lexn").
:- ensure_loaded("lexv").
:- ensure_loaded("lexa").
:- ensure_loaded("lexe").
:- ensure_loaded("lillib/lists").
:- ensure_loaded("lillib/strings").

base_and_template_to_sign <- [pred].
find_word <- [pred]. % DEBUG

:- module_implementation.

find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\pronoun) :-
  lexpro($lemma, $sign).
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\noun) :-
  lexn($lemma, $sign).
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\verb) :-
  lexv($lemma, $sign),
  % sverbs have subject as first complement (default)
  ($sign = SYNSEM\LOCAL\CAT\HEAD\sverb ->
    $sign = SYNSEM\LOCAL\CAT\VAL\
        ( SUBJ\[$subj]
        & COMPS\
          [$subj | _]
        );
    true).
find_word($lemma, $sign & SYNSEM\LOCAL\CAT\HEAD\adjective) :-
  lexa($lemma, $sign).

transform <- [pred].
transform($sign) :-
  % delete the actor from the passive participles; obligatory
  $sign = SYNSEM\LOCAL\(CAT\HEAD\verb & CONT\TAM\VOICE\passive), !,
  % fail if not a classic nom/acc transitive verb
  $sign
    = SYNSEM\LOCAL\CAT\VAL\
      ( $val
        & COMPS\
          [ CAT\HEAD\CASE\nom
          | $comps
            & [ CAT\HEAD\
                ( $head
                & CASE\acc
                )
              | _
              ]
          ]
      ),
  overwrite($head, CASE\, nom),
  overwrite($val, COMPS\, $comps).
transform($sign) :-
  $sign
    = SYNSEM\LOCAL\CAT\
      ( HEAD\(noun & CASE\gen)
      & VAL\$val
      ),
  overwrite($val, MOD\,
    [ CAT\HEAD\noun
    ]).
transform($sign) :-
  $sign
    = SYNSEM\LOCAL\CAT\
      ( HEAD\(noun & CASE\dat)
      & VAL\$val
      ),
  overwrite($val, MOD\,
    [ CAT\HEAD\verb
    ]).
transform(_).


base_and_template_to_sign($base, $template, $sign) :- % changeable words (morphology resolution)
  parse_morph($template, $sign),
  find_word($base, $sign),
  transform($sign).
base_and_template_to_sign($base, _, $sign) :- % unchangeable words (exact match)
  lexe($base, $sign).
